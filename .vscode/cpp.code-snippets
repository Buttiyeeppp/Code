{
    "Base": {
        "scope": "cpp",
        "prefix": [
            "temp-base"
        ],
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#define clo 1000.*clock()/CLOCKS_PER_SEC",
            "#ifndef xxzx",
            "#define endl '\\n'",
            "#endif",
            "using ll=long long;",
            "using PII=pair<int,int>;",
            "bool mem1;",
            "",
            "bool mem2;",
            "int main() {",
            "    ios::sync_with_stdio(false), cin.tie(nullptr);",
            "",
            "",
            "",
            "    #ifdef xxzx",
            "    cerr<<\"Time: \"<<clo<<\"MS\"<<endl;",
            "    cerr<<\"Memory: \"<<abs(&mem1-&mem2)/1024./1024.<<\"MB\"<<endl;",
            "    #endif",
            "    return 0;",
            "}"
        ]
    },
    "Fread": {
        "scope": "cpp",
        "prefix": [
            "temp-fread"
        ],
        "body": [
            "template<typename T=int> T read() {",
            "    T f=1,x=0; char ch=getchar();",
            "    while(ch<'0'||ch>'9') {if(ch=='-') f=-1; ch=getchar(); }",
            "    while(ch>='0'&&ch<='9') { x=x*10+ch-'0', ch=getchar(); }",
            "    return f*x;",
            "}"
        ]
    },
    "Fwrite": {
        "scope": "cpp",
        "prefix": [
            "temp-fwrite"
        ],
        "body": [
            "template<typename T> void write(T x) {",
            "    if(x<0) x=-x, putchar('-');",
            "    if(x>9) write(x/10);",
            "    putchar((x%10)+'0');",
            "}"
        ]
    },
    "Chkout": {
        "scope": "cpp",
        "prefix": [
            "temp-chkout"
        ],
        "body": [
            "template<typename T> void chk_out(string op,T a[],int l1=-1,int r1=-1) {",
            "    cerr<<\"Out of \"<<op<<' ';",
            "    if(~l1) for(int i=l1;i<=r1;i++) cerr<<a[i]<<' ';",
            "    cerr<<endl;",
            "}"
        ]
    },
    "Vecout": {
        "scope": "cpp",
        "prefix": [
            "temp-vecout"
        ],
        "body": [
            "template<typename T> void vec_out(string op,T a,int l1=-1,int r1=-1) {",
            "    cerr<<\"Out of \"<<op<<' ';",
            "    if(~l1) for(int i=l1;i<=r1;i++) cerr<<a[i]<<' ';",
            "    else for(auto now:a) cerr<<now<<' ';",
            "    cerr<<endl;",
            "}"
        ]
    },
}